summary(model2)
df_level_dropped <- df[df$task_stage!=1, ]
rt <-  df_level_dropped$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df_level_dropped, family=Gamma(link=log))
summary(model1)
df_level_dropped <- df[df$task_stage!=1, ]
rt <-  df_level_dropped$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df_level_dropped, family=Gamma())
summary(model1)
df_level_dropped <- df[df$task_stage!=1, ]
rt <-  df_level_dropped$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df_level_dropped, family=inverse.gaussian(link = "identity")))
df_level_dropped <- df[df$task_stage!=1, ]
rt <-  df_level_dropped$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df_level_dropped, family=inverse.gaussian(link = "identity"))
df_level_dropped <- df[df$task_stage!=1, ]
rt <-  df_level_dropped$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df_level_dropped, family=inverse.gaussian(link = "identity"))
df_level_dropped <- df[df$task_stage!=1, ]
rt <-  df_level_dropped$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = ., family=inverse.gaussian(link = "identity"))
df_level_dropped <- df[df$task_stage!=1, ]
rt <-  df_level_dropped$reaction_time
task_stage <-  df_level_dropped$task_stage
subject <-  df_level_dropped$subject
model1 <- glmer(rt ~ task_stage + (1 | subject), data = ., family=inverse.gaussian(link = "identity"))
df_level_dropped <- df[df$task_stage!=1, ]
rt <-  df_level_dropped$reaction_time
task_stage <-  df_level_dropped$task_stage
subject <-  df_level_dropped$subject
model1 <- glmer(rt ~ task_stage + (1 | subject), data=., family=inverse.gaussian(link = "identity"))
df_level_dropped <- df[df$task_stage!=1, ]
rt <-  df_level_dropped$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df_level_dropped, family=inverse.gaussian())
summary(model1)
df_level_dropped <- df[df$task_stage!=1, ]
rt <-  df_level_dropped$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df_level_dropped, family=inverse.gaussian(link='identity'))
df_level_dropped <- df[df$task_stage!=1, ]
rt <-  df_level_dropped$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df_level_dropped, family=inverse.gaussian())
summary(model1)
rt <-  df$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df_level_dropped, family=inverse.gaussian())
rt <-  df$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df, family=inverse.gaussian())
summary(model1)
library(yaml)
library(feather)
library(lme4)
library(lmerTest)
library(simr)
library(car)
library(fitdistrplus)
library(MASS)
library(here)
# Read the configuration file
config <- yaml.load_file("../config.yml")
# Read the R dataframe
r_dataframe_path <- here(config$r_dataframe)
df <- read_feather(r_dataframe_path)
df <- na.omit(df)
# Convert to factor
factors <- c("task_stage", "fixation_rate", "transition_ratio", "glance_ratio", "pupil_size", "mental_workload", "avg_mental_workload", "high_engagement", "low_engagement", "distraction", "subject", "performance_level")
df[factors] <- lapply(df[factors], as.factor)
df
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
rt <-  df$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df, family=Gamma())
summary(model1)
df$performance_level <- relevel(df$performance_level, 'low_performer')
df_level_dropped <- df[df$task_stage!=1, ]
rt <-  df_level_dropped$reaction_time
model2 <- lmer(rt ~ performance_level + (1 | subject), data = df_level_dropped)
summary(model2)
model3 <- lmer(rt ~ 1 + (1 | subject), data = df)
rt <-  df$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df, family=inverse.gaussian())
summary(model1)
df$performance_level <- relevel(df$performance_level, 'low_performer')
model2 <- lmer(rt ~ performance_level + (1 | subject), data = df)
summary(model2)
df$performance_level <- relevel(df$performance_level, 'low_performer')
model2 <- glmer(rt ~ performance_level + (1 | subject), data = df, family=inverse.gaussian())
summary(model2)
df$performance_level <- relevel(df$performance_level, 'low_performer')
model2 <- glmer(rt ~ performance_level + (1 | subject), data = df, family=inverse.gaussian())
summary(model2)
install.packages("retimes")
library(yaml)
library(feather)
library(lme4)
library(lmerTest)
library(simr)
library(car)
library(fitdistrplus)
library(MASS)
library(here)
library(retimes)
# Read the configuration file
config <- yaml.load_file("../config.yml")
# Read the R dataframe
r_dataframe_path <- here(config$r_dataframe)
df <- read_feather(r_dataframe_path)
df <- na.omit(df)
# Convert to factor
factors <- c("task_stage", "fixation_rate", "transition_ratio", "glance_ratio", "pupil_size", "mental_workload", "avg_mental_workload", "high_engagement", "low_engagement", "distraction", "subject", "performance_level")
df[factors] <- lapply(df[factors], as.factor)
df
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
fit.exgauss <-  timefit(rt)
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
fit.exgauss <-  timefit(rt)
# AIC varification
fit.weibull$aic
fit.norm$aic
fit.gamma$aic
fit.lnorm$aic
fit.exgauss$aic
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
fit.exgauss <-  timefit(rt)
# AIC varification
fit.weibull$aic
fit.norm$aic
fit.gamma$aic
fit.lnorm$aic
fit.exgauss@aic
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
fit.exgauss <-  timefit(rt)
# AIC varification
fit.weibull$aic
fit.norm$aic
fit.gamma$aic
fit.lnorm$aic
fit.exgauss@AIC
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
fit.exgauss <-  timefit(rt)
fit.invergauss <-fitdist(claims,"invgauss",start=list(mu=1,lambda=1))
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
fit.exgauss <-  timefit(rt)
fit.invergauss <-fitdist(rt,"invgauss",start=list(mu=1,lambda=1))
install.packages("GeneralizedHyperbolic")
library(yaml)
library(feather)
library(lme4)
library(lmerTest)
library(simr)
library(car)
library(fitdistrplus)
library(MASS)
library(here)
library(retimes)
library(GeneralizedHyperbolic)
# Read the configuration file
config <- yaml.load_file("../config.yml")
# Read the R dataframe
r_dataframe_path <- here(config$r_dataframe)
df <- read_feather(r_dataframe_path)
df <- na.omit(df)
# Convert to factor
factors <- c("task_stage", "fixation_rate", "transition_ratio", "glance_ratio", "pupil_size", "mental_workload", "avg_mental_workload", "high_engagement", "low_engagement", "distraction", "subject", "performance_level")
df[factors] <- lapply(df[factors], as.factor)
df
View(fit.exgauss)
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
fit.exgauss <-  timefit(rt)
fit.invergauss <-fitdist(rt,"invgauss",start=list(mu=1,lambda=1))
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
fit.exgauss <-  timefit(rt)
fit.invergauss <- nigFit(rt)
# AIC varification
fit.weibull$aic
fit.norm$aic
fit.gamma$aic
fit.lnorm$aic
fit.exgauss@AIC
install.packages("ghyp")
library(yaml)
library(feather)
library(lme4)
library(lmerTest)
library(simr)
library(car)
library(fitdistrplus)
library(MASS)
library(here)
library(retimes)
library(ghyp)
# Read the configuration file
config <- yaml.load_file("../config.yml")
# Read the R dataframe
r_dataframe_path <- here(config$r_dataframe)
df <- read_feather(r_dataframe_path)
df <- na.omit(df)
# Convert to factor
factors <- c("task_stage", "fixation_rate", "transition_ratio", "glance_ratio", "pupil_size", "mental_workload", "avg_mental_workload", "high_engagement", "low_engagement", "distraction", "subject", "performance_level")
df[factors] <- lapply(df[factors], as.factor)
df
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
fit.exgauss <-  timefit(rt)
# AIC varification
fit.weibull$aic
fit.norm$aic
fit.gamma$aic
fit.lnorm$aic
fit.exgauss@AIC
AIC <- stepAIC.ghyp(yret, dist = c("ghyp", "hyp", "NIG"),
symmetric = FALSE,
control = list(maxit = 1000))
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
fit.exgauss <-  timefit(rt)
# AIC varification
fit.weibull$aic
fit.norm$aic
fit.gamma$aic
fit.lnorm$aic
fit.exgauss@AIC
AIC <- stepAIC.ghyp(rt, dist = c("ghyp", "hyp", "NIG"),
symmetric = FALSE,
control = list(maxit = 1000))
AIC
AIC
library(yaml)
library(feather)
library(lme4)
library(lmerTest)
library(simr)
library(car)
library(fitdistrplus)
library(MASS)
library(here)
library(retimes)
library(ghyp)
# Read the configuration file
config <- yaml.load_file("../config.yml")
# Read the R dataframe
r_dataframe_path <- here(config$r_dataframe)
df <- read_feather(r_dataframe_path)
df <- na.omit(df)
# Convert to factor
factors <- c("task_stage", "fixation_rate", "transition_ratio", "glance_ratio", "pupil_size", "mental_workload", "avg_mental_workload", "high_engagement", "low_engagement", "distraction", "subject", "performance_level")
df[factors] <- lapply(df[factors], as.factor)
df
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
fit.exgauss <-  timefit(rt)
# AIC varification
fit.weibull$aic
fit.norm$aic
fit.gamma$aic
fit.lnorm$aic
fit.exgauss@AIC
AIC <- stepAIC.ghyp(rt, dist = c("ghyp", "hyp", "NIG"),
symmetric = FALSE,
control = list(maxit = 1000))
AIC
rt <-  df$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df, family=inverse.gaussian())
summary(model1)
df$performance_level <- relevel(df$performance_level, 'low_performer')
model2 <- glmer(rt ~ performance_level + (1 | subject), data = df, family=inverse.gaussian())
summary(model2)
model3 <- lmer(rt ~ 1 + (1 | subject), data = df)
summary(model3)
AIC$best.model
AIC$fit.table
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
fit.exgauss <-  timefit(rt)
# AIC varification
fit.weibull$aic
fit.norm$aic
fit.gamma$aic
fit.lnorm$aic
fit.exgauss@AIC
AIC <- stepAIC.ghyp(rt, dist = c("NIG"),
symmetric = FALSE,
control = list(maxit = 1000))
AIC
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
fit.exgauss <-  timefit(rt)
# AIC varification
fit.weibull$aic
fit.norm$aic
fit.gamma$aic
fit.lnorm$aic
fit.exgauss@AIC
AIC <- stepAIC.ghyp(rt, dist = c("NIG"),
symmetric = FALSE,
control = list(maxit = 1000))
AIC$fit.table
rt <- df$reaction_time
plotdist(rt, histo = TRUE, demp = TRUE)
# Distribution analysis
qqp(rt, "lnorm")
qqp(rt, "norm")
beta <- fitdistr(rt, "beta", start=list(shape1=0.5, shape2=0.5))
qqp(rt, "beta", shape1 = beta$estimate[[1]], shape2 = beta$estimate[[2]])
gamma <- fitdistr(rt, "gamma")
qqp(rt, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
# Cullen and Frey graph
descdist(rt, discrete = FALSE, boot = 1000)
fit.weibull <- fitdist(rt, "weibull")
fit.norm <- fitdist(rt, "norm")
fit.gamma <- fitdist(rt, "gamma")
fit.lnorm <- fitdist(rt, "lnorm")
fit.exgauss <-  timefit(rt)
# AIC varification
fit.weibull$aic
fit.norm$aic
fit.gamma$aic
fit.lnorm$aic
fit.exgauss@AIC
AIC <- stepAIC.ghyp(rt, dist = c("NIG"),
symmetric = FALSE,
control = list(maxit = 1000), silent = TRUE)
AIC$fit.table
AIC$fit.table
