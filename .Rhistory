precinormal <- function(t, u, s){
integrate(drecinormal, 0, t, u, s, abs.tol=1E-7)$value;
}
qrecinormal <-  function(q, u, s){
uniroot(function(x){precinormal(x, u, s) - q}, c(0, 5))$root
}
fit.recinormal <- fitdist(rt,"recinormal", start=list(u=0.1,s=1.5));
output <-  c(fit.weibull$aic, fit.gamma$aic, fit.invgauss$aic, fit.recinormal$aic)
return(output)
}
out <-  c()
for (subject in subjects){
df_temp <-  df[df$subject==subject, ]
out <- rbind(out, aic.output(df_temp));
}
options(warn=-1)
subjects <-  unique(df$subject)
aic.output <- function(df){
rt <- df$reaction_time
# Fit different distributions
fit.weibull <- fitdist(rt, "weibull");
fit.gamma <- fitdist(rt, "gamma");
myoptim <- function(fn, par, ui, ci, ...)
{
res <- constrOptim(f=fn, theta=par, method="Nelder-Mead", ui=ui, ci=ci, ...)
c(res, convergence=res$convergence, value=res$objective, par=res$minimum, hessian=res$hessian)
}
x <- rnig(1000, 3, 1/2, 1/2, 1/4)
ui <- rbind(c(0,1,0,0), c(0,0,1,0), c(0,0,1,-1), c(0,0,1,1))
ci <- c(0,0,0,0)
fit.invgauss <- fitdist(rt, "nig", custom.optim=myoptim, ui=ui, ci=ci,
start=list(mu = 0.1, delta = 1, alpha = 1, beta = 0));
# Custom reci-normal distribution fit
drecinormal <-  function(t, u, s){
ifelse(t==0.0, 0.0, 1/(t^2*s*sqrt(2*pi))*exp(-(u*t-1)^2/(2*t^2*s^2)));
}
precinormal <- function(t, u, s){
integrate(drecinormal, 0, t, u, s, abs.tol=1E-5)$value;
}
qrecinormal <-  function(q, u, s){
uniroot(function(x){precinormal(x, u, s) - q}, c(0, 5))$root
}
fit.recinormal <- fitdist(rt,"recinormal", start=list(u=0.1,s=1.5));
output <-  c(fit.weibull$aic, fit.gamma$aic, fit.invgauss$aic, fit.recinormal$aic)
return(output)
}
out <-  c()
for (subject in subjects){
df_temp <-  df[df$subject==subject, ]
out <- rbind(out, aic.output(df_temp));
}
options(warn=-1)
subjects <-  unique(df$subject)
aic.output <- function(df){
rt <- df$reaction_time
# Fit different distributions
fit.weibull <- fitdist(rt, "weibull");
fit.gamma <- fitdist(rt, "gamma");
myoptim <- function(fn, par, ui, ci, ...)
{
res <- constrOptim(f=fn, theta=par, method="Nelder-Mead", ui=ui, ci=ci, ...)
c(res, convergence=res$convergence, value=res$objective, par=res$minimum, hessian=res$hessian)
}
x <- rnig(1000, 3, 1/2, 1/2, 1/4)
ui <- rbind(c(0,1,0,0), c(0,0,1,0), c(0,0,1,-1), c(0,0,1,1))
ci <- c(0,0,0,0)
fit.invgauss <- fitdist(rt, "nig", custom.optim=myoptim, ui=ui, ci=ci,
start=list(mu = 0.1, delta = 1, alpha = 1, beta = 0));
# Custom reci-normal distribution fit
drecinormal <-  function(t, u, s){
ifelse(t==0.0, 0.0, 1/(t^2*s*sqrt(2*pi))*exp(-(u*t-1)^2/(2*t^2*s^2)));
}
precinormal <- function(t, u, s){
integrate(drecinormal, 0, t, u, s, abs.tol=1E-5)$value;
}
qrecinormal <-  function(q, u, s){
uniroot(function(x){precinormal(x, u, s) - q}, c(0, 5))$root
}
fit.recinormal <- fitdist(rt,"recinormal", start=list(u=0.5,s=1.5));
output <-  c(fit.weibull$aic, fit.gamma$aic, fit.invgauss$aic, fit.recinormal$aic)
return(output)
}
out <-  c()
for (subject in subjects){
df_temp <-  df[df$subject==subject, ]
out <- rbind(out, aic.output(df_temp));
}
rt <-  df$reaction_time
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df, family=inverse.gaussian())
summary(model1)
df$performance_level <- relevel(df$performance_level, 'low_performer')
model2 <- glmer(rt ~ performance_level + (1 | subject), data = df, family=inverse.gaussian())
summary(model2)
df$performance_level <- relevel(df$performance_level, 'low_performer')
model2 <- glmer(rt ~ performance_level , data = df, family=inverse.gaussian())
df$performance_level <- relevel(df$performance_level, 'low_performer')
model2 <- glmer(rt ~ performance_level + (1 | subject), data = df, family=inverse.gaussian())
summary(model2)
model3 <- lmer(rt ~ 1 + (1 | subject), data = df)
summary(model3)
df$performance_level <- relevel(df$performance_level, 'low_performer')
model2 <- lm(rt ~ performance_level, data = df, family=inverse.gaussian())
summary(model2)
df$performance_level <- relevel(df$performance_level, 'low_performer')
model2 <- glm(rt ~ performance_level, data = df, family=inverse.gaussian())
summary(model2)
options(warn=-1)
subjects <-  unique(df$subject)
aic.output <- function(df){
rt <- df$mental_workload
# Fit different distributions
fit.weibull <- fitdist(rt, "weibull");
fit.gamma <- fitdist(rt, "gamma");
myoptim <- function(fn, par, ui, ci, ...)
{
res <- constrOptim(f=fn, theta=par, method="Nelder-Mead", ui=ui, ci=ci, ...)
c(res, convergence=res$convergence, value=res$objective, par=res$minimum, hessian=res$hessian)
}
x <- rnig(1000, 3, 1/2, 1/2, 1/4)
ui <- rbind(c(0,1,0,0), c(0,0,1,0), c(0,0,1,-1), c(0,0,1,1))
ci <- c(0,0,0,0)
fit.invgauss <- fitdist(rt, "nig", custom.optim=myoptim, ui=ui, ci=ci,
start=list(mu = 0.1, delta = 1, alpha = 1, beta = 0));
# Custom reci-normal distribution fit
drecinormal <-  function(t, u, s){
ifelse(t==0.0, 0.0, 1/(t^2*s*sqrt(2*pi))*exp(-(u*t-1)^2/(2*t^2*s^2)));
}
precinormal <- function(t, u, s){
integrate(drecinormal, 0, t, u, s, abs.tol=1E-5)$value;
}
qrecinormal <-  function(q, u, s){
uniroot(function(x){precinormal(x, u, s) - q}, c(0, 5))$root
}
fit.recinormal <- fitdist(rt,"recinormal", start=list(u=0.5,s=1.5));
output <-  c(fit.weibull$aic, fit.gamma$aic, fit.invgauss$aic, fit.recinormal$aic)
return(output)
}
out <-  c()
for (subject in subjects){
df_temp <-  df[df$subject==subject, ]
out <- rbind(out, aic.output(df_temp));
}
options(warn=-1)
subjects <-  unique(df$subject)
aic.output <- function(df){
rt <- df$mental_workload
rt
# Fit different distributions
fit.weibull <- fitdist(rt, "weibull");
fit.gamma <- fitdist(rt, "gamma");
myoptim <- function(fn, par, ui, ci, ...)
{
res <- constrOptim(f=fn, theta=par, method="Nelder-Mead", ui=ui, ci=ci, ...)
c(res, convergence=res$convergence, value=res$objective, par=res$minimum, hessian=res$hessian)
}
x <- rnig(1000, 3, 1/2, 1/2, 1/4)
ui <- rbind(c(0,1,0,0), c(0,0,1,0), c(0,0,1,-1), c(0,0,1,1))
ci <- c(0,0,0,0)
fit.invgauss <- fitdist(rt, "nig", custom.optim=myoptim, ui=ui, ci=ci,
start=list(mu = 0.1, delta = 1, alpha = 1, beta = 0));
# Custom reci-normal distribution fit
drecinormal <-  function(t, u, s){
ifelse(t==0.0, 0.0, 1/(t^2*s*sqrt(2*pi))*exp(-(u*t-1)^2/(2*t^2*s^2)));
}
precinormal <- function(t, u, s){
integrate(drecinormal, 0, t, u, s, abs.tol=1E-5)$value;
}
qrecinormal <-  function(q, u, s){
uniroot(function(x){precinormal(x, u, s) - q}, c(0, 5))$root
}
fit.recinormal <- fitdist(rt,"recinormal", start=list(u=0.5,s=1.5));
output <-  c(fit.weibull$aic, fit.gamma$aic, fit.invgauss$aic, fit.recinormal$aic)
return(output)
}
out <-  c()
for (subject in subjects){
df_temp <-  df[df$subject==subject, ]
out <- rbind(out, aic.output(df_temp));
}
library(yaml)
library(feather)
library(lme4)
library(lmerTest)
library(simr)
library(car)
library(goft)
library(fitdistrplus)
library(MASS)
library(here)
library(GeneralizedHyperbolic)
library(retimes)
library(ghyp)
# Read the configuration file
config <- yaml.load_file("../config.yml")
# Read the R dataframe
r_dataframe_path <- here(config$r_dataframe)
df <- read_feather(r_dataframe_path)
df <- na.omit(df)
# Convert to factor
factors <- c("task_stage", "fixation_rate", "transition_ratio", "glance_ratio", "pupil_size", "mental_workload", "avg_mental_workload", "high_engagement", "low_engagement", "distraction", "subject", "performance_level")
df[factors] <- lapply(df[factors], as.factor)
df
options(warn=-1)
subjects <-  unique(df$subject)
aic.output <- function(df){
rt <- df$reaction_time
# Fit different distributions
fit.weibull <- fitdist(rt, "weibull");
fit.gamma <- fitdist(rt, "gamma");
myoptim <- function(fn, par, ui, ci, ...)
{
res <- constrOptim(f=fn, theta=par, method="Nelder-Mead", ui=ui, ci=ci, ...)
c(res, convergence=res$convergence, value=res$objective, par=res$minimum, hessian=res$hessian)
}
x <- rnig(1000, 3, 1/2, 1/2, 1/4)
ui <- rbind(c(0,1,0,0), c(0,0,1,0), c(0,0,1,-1), c(0,0,1,1))
ci <- c(0,0,0,0)
fit.invgauss <- fitdist(rt, "nig", custom.optim=myoptim, ui=ui, ci=ci,
start=list(mu = 0.1, delta = 1, alpha = 1, beta = 0));
# Custom reci-normal distribution fit
drecinormal <-  function(t, u, s){
ifelse(t==0.0, 0.0, 1/(t^2*s*sqrt(2*pi))*exp(-(u*t-1)^2/(2*t^2*s^2)));
}
precinormal <- function(t, u, s){
integrate(drecinormal, 0, t, u, s, abs.tol=1E-5)$value;
}
qrecinormal <-  function(q, u, s){
uniroot(function(x){precinormal(x, u, s) - q}, c(0, 5))$root
}
fit.recinormal <- fitdist(rt,"recinormal", start=list(u=0.5,s=1.5));
output <-  c(fit.weibull$aic, fit.gamma$aic, fit.invgauss$aic, fit.recinormal$aic)
return(output)
}
out <-  c()
for (subject in subjects){
df_temp <-  df[df$subject==subject, ]
out <- rbind(out, aic.output(df_temp));
}
mw <-  df$mental_workload
mw <-  df$mental_workload
mw <-  df$mental_workload
mw
library(yaml)
library(feather)
library(lme4)
library(lmerTest)
library(simr)
library(car)
library(goft)
library(fitdistrplus)
library(MASS)
library(here)
library(GeneralizedHyperbolic)
library(retimes)
library(ghyp)
# Read the configuration file
config <- yaml.load_file("../config.yml")
# Read the R dataframe
r_dataframe_path <- here(config$r_dataframe)
df <- read_feather(r_dataframe_path)
df <- na.omit(df)
# Convert to factor
factors <- c("task_stage", "fixation_rate", "transition_ratio", "glance_ratio", "pupil_size", "mental_workload", "avg_mental_workload", "high_engagement", "low_engagement", "distraction", "subject", "performance_level")
df[factors] <- lapply(df[factors], as.factor)
df
options(warn=-1)
subjects <-  unique(df$subject)
aic.output <- function(df){
rt <- df$reaction_time
# Fit different distributions
fit.weibull <- fitdist(rt, "weibull");
fit.gamma <- fitdist(rt, "gamma");
myoptim <- function(fn, par, ui, ci, ...)
{
res <- constrOptim(f=fn, theta=par, method="Nelder-Mead", ui=ui, ci=ci, ...)
c(res, convergence=res$convergence, value=res$objective, par=res$minimum, hessian=res$hessian)
}
x <- rnig(1000, 3, 1/2, 1/2, 1/4)
ui <- rbind(c(0,1,0,0), c(0,0,1,0), c(0,0,1,-1), c(0,0,1,1))
ci <- c(0,0,0,0)
fit.invgauss <- fitdist(rt, "nig", custom.optim=myoptim, ui=ui, ci=ci,
start=list(mu = 0.1, delta = 1, alpha = 1, beta = 0));
# Custom reci-normal distribution fit
drecinormal <-  function(t, u, s){
ifelse(t==0.0, 0.0, 1/(t^2*s*sqrt(2*pi))*exp(-(u*t-1)^2/(2*t^2*s^2)));
}
precinormal <- function(t, u, s){
integrate(drecinormal, 0, t, u, s, abs.tol=1E-5)$value;
}
qrecinormal <-  function(q, u, s){
uniroot(function(x){precinormal(x, u, s) - q}, c(0, 5))$root
}
fit.recinormal <- fitdist(rt,"recinormal", start=list(u=0.5,s=1.5));
output <-  c(fit.weibull$aic, fit.gamma$aic, fit.invgauss$aic, fit.recinormal$aic)
return(output)
}
out <-  c()
for (subject in subjects){
df_temp <-  df[df$subject==subject, ]
out <- rbind(out, aic.output(df_temp));
}
mw <-  df$mental_workload
mw
processed <- out[out[,4]<0, ]
colMeans(processed)
rt <-  df$mental_workload
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df, family=inverse.gaussian())
rt <-  df$mental_workload
rt
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df, family=inverse.gaussian())
rt <-  df$mental_workload
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df, family=inverse.gaussian())
rt <-  df$mental_workload
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df)
rt <-  df$mental_workload
plot(rt)
rt <-  df$mental_workload
plotdist(rt)
library(yaml)
library(feather)
library(lme4)
library(lmerTest)
library(simr)
library(car)
library(goft)
library(fitdistrplus)
library(MASS)
library(here)
library(GeneralizedHyperbolic)
library(retimes)
library(ghyp)
# Read the configuration file
config <- yaml.load_file("../config.yml")
# Read the R dataframe
r_dataframe_path <- here(config$r_dataframe)
df <- read_feather(r_dataframe_path)
df <- na.omit(df)
# Convert to factor
factors <- c("task_stage", "fixation_rate", "transition_ratio", "glance_ratio", "pupil_size", "avg_mental_workload", "high_engagement", "low_engagement", "distraction", "subject", "performance_level")
df[factors] <- lapply(df[factors], as.factor)
df
rt <-  df$mental_workload
plotdist(rt)
rt <-  df$mental_workload
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df)
summary(model1)
rt <-  df$mental_workload
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df)
summary(model1)
df$performance_level <- relevel(df$performance_level, 'low_performer')
model2 <- glm(rt ~ performance_level, data = df, family=inverse.gaussian())
summary(model2)
model3 <- lmer(rt ~ 1 + (1 | subject), data = df)
summary(model3)
library(yaml)
library(feather)
library(lme4)
library(lmerTest)
library(simr)
library(car)
library(goft)
library(fitdistrplus)
library(MASS)
library(here)
library(GeneralizedHyperbolic)
library(retimes)
library(ghyp)
# Read the configuration file
config <- yaml.load_file("../config.yml")
# Read the R dataframe
r_dataframe_path <- here(config$r_dataframe)
df <- read_feather(r_dataframe_path)
df <- na.omit(df)
# Convert to factor
factors <- c("task_stage", "fixation_rate", "transition_ratio", "glance_ratio", "pupil_size", "avg_mental_workload", "high_engagement", "low_engagement", "distraction", "subject", "performance_level")
df[factors] <- lapply(df[factors], as.factor)
df
rt <-  df$mental_workload
model1 <- glmer(rt ~ task_stage + (1 | subject), data = df)
summary(model1)
rt <-  df$mental_workload
model1 <- lmer(rt ~ task_stage + (1 | subject), data = df)
summary(model1)
rt <-  df$mental_workload
model1 <- lmer(rt ~ task_stage + (1 | subject), data = df)
summary(model1)
library(yaml)
library(feather)
library(lme4)
library(lmerTest)
library(simr)
library(car)
library(goft)
library(fitdistrplus)
library(MASS)
library(here)
library(GeneralizedHyperbolic)
library(retimes)
library(ghyp)
# Read the configuration file
config <- yaml.load_file("../config.yml")
# Read the R dataframe
r_dataframe_path <- here(config$r_dataframe)
df <- read_feather(r_dataframe_path)
df <- na.omit(df)
# Convert to factor
factors <- c("task_stage", "fixation_rate", "transition_ratio", "glance_ratio", "pupil_size", "avg_mental_workload", "high_engagement", "low_engagement", "distraction", "subject", "performance_level")
df[factors] <- lapply(df[factors], as.factor)
df
options(warn=-1)
subjects <-  unique(df$subject)
aic.output <- function(df){
rt <- df$reaction_time
# Fit different distributions
fit.weibull <- fitdist(rt, "weibull");
fit.gamma <- fitdist(rt, "gamma");
myoptim <- function(fn, par, ui, ci, ...)
{
res <- constrOptim(f=fn, theta=par, method="Nelder-Mead", ui=ui, ci=ci, ...)
c(res, convergence=res$convergence, value=res$objective, par=res$minimum, hessian=res$hessian)
}
x <- rnig(1000, 3, 1/2, 1/2, 1/4)
ui <- rbind(c(0,1,0,0), c(0,0,1,0), c(0,0,1,-1), c(0,0,1,1))
ci <- c(0,0,0,0)
fit.invgauss <- fitdist(rt, "nig", custom.optim=myoptim, ui=ui, ci=ci,
start=list(mu = 0.1, delta = 1, alpha = 1, beta = 0));
# Custom reci-normal distribution fit
drecinormal <-  function(t, u, s){
ifelse(t==0.0, 0.0, 1/(t^2*s*sqrt(2*pi))*exp(-(u*t-1)^2/(2*t^2*s^2)));
}
precinormal <- function(t, u, s){
integrate(drecinormal, 0, t, u, s, abs.tol=1E-5)$value;
}
qrecinormal <-  function(q, u, s){
uniroot(function(x){precinormal(x, u, s) - q}, c(0, 5))$root
}
fit.recinormal <- fitdist(rt,"recinormal", start=list(u=0.5,s=1.5));
output <-  c(fit.weibull$aic, fit.gamma$aic, fit.invgauss$aic, fit.recinormal$aic)
return(output)
}
out <-  c()
for (subject in subjects){
df_temp <-  df[df$subject==subject, ]
out <- rbind(out, aic.output(df_temp));
}
library(yaml)
library(feather)
library(lme4)
library(lmerTest)
library(simr)
library(car)
library(goft)
library(fitdistrplus)
library(MASS)
library(here)
library(GeneralizedHyperbolic)
library(retimes)
library(ghyp)
# Read the configuration file
config <- yaml.load_file("../config.yml")
# Read the R dataframe
r_dataframe_path <- here(config$r_dataframe)
df <- read_feather(r_dataframe_path)
df <- na.omit(df)
# Convert to factor
factors <- c("task_stage", "fixation_rate", "transition_ratio", "glance_ratio", "pupil_size", "avg_mental_workload", "high_engagement", "low_engagement", "distraction", "subject", "performance_level")
df[factors] <- lapply(df[factors], as.factor)
df
options(warn=-1)
subjects <-  unique(df$subject)
aic.output <- function(df){
rt <- df$reaction_time
# Fit different distributions
fit.weibull <- fitdist(rt, "weibull");
fit.gamma <- fitdist(rt, "gamma");
myoptim <- function(fn, par, ui, ci, ...)
{
res <- constrOptim(f=fn, theta=par, method="Nelder-Mead", ui=ui, ci=ci, ...)
c(res, convergence=res$convergence, value=res$objective, par=res$minimum, hessian=res$hessian)
}
x <- rnig(1000, 3, 1/2, 1/2, 1/4)
ui <- rbind(c(0,1,0,0), c(0,0,1,0), c(0,0,1,-1), c(0,0,1,1))
ci <- c(0,0,0,0)
fit.invgauss <- fitdist(rt, "nig", custom.optim=myoptim, ui=ui, ci=ci,
start=list(mu = 0.1, delta = 1, alpha = 1, beta = 0));
# Custom reci-normal distribution fit
drecinormal <-  function(t, u, s){
ifelse(t==0.0, 0.0, 1/(t^2*s*sqrt(2*pi))*exp(-(u*t-1)^2/(2*t^2*s^2)));
}
precinormal <- function(t, u, s){
integrate(drecinormal, 0, t, u, s, abs.tol=1E-5)$value;
}
qrecinormal <-  function(q, u, s){
uniroot(function(x){precinormal(x, u, s) - q}, c(0, 5))$root
}
fit.recinormal <- fitdist(rt,"recinormal", start=list(u=0.5,s=1.5));
output <-  c(fit.weibull$aic, fit.gamma$aic, fit.invgauss$aic, fit.recinormal$aic)
return(output)
}
out <-  c()
for (subject in subjects){
df_temp <-  df[df$subject==subject, ]
out <- rbind(out, aic.output(df_temp));
}
rt <-  df$mental_workload
model1 <- lmer(rt ~ task_stage + (1 | subject), data = df)
summary(model1)
df$performance_level <- relevel(df$performance_level, 'low_performer')
model2 <- glm(rt ~ performance_level, data = df, family=inverse.gaussian())
summary(model2)
model3 <- lmer(rt ~ 1 + (1 | subject), data = df)
summary(model3)
